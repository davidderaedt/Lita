<?xml version="1.0" encoding="utf-8"?>
<!--
    Lita: A free and open source SQLite database administration tool for Windows, MacOSX and Linux.
    Copyright (C) 2010  David Deraedt

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<s:WindowedApplication 
	xmlns:view="com.dehats.sqla.view.*" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="960"
	height="600"
	showStatusBar="false"
	creationComplete=" onCreationComplete()"
	invoke=" mainPM.onInvoke(event);"
	implements="com.dehats.sqla.model.presentation.IMainView">
	
	<fx:Style source="AppStyles.css"/>
	
	<fx:Script>
		<![CDATA[ 
			import com.dehats.sqla.view.WelcomeDialog;
			import com.dehats.sqla.view.CopyTableDialog;
			import com.dehats.sqla.view.ReencryptionDialog;
			import com.dehats.sqla.view.UpgradeEncryptionDialog;
			import com.dehats.sqla.model.presentation.IMainView;
			import com.dehats.sqla.view.CreateDBDialog;
			import com.dehats.sqla.view.AboutWin;
			import com.dehats.sqla.view.OpenFileDialog;
			import com.dehats.sqla.model.AssetManager;
			import com.dehats.sqla.model.presentation.MainPM;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.containers.TitleWindow;
			import com.dehats.sqla.view.CreateTableDialog;
			import mx.events.CloseEvent;
			import com.dehats.sqla.model.MainModel; 
			
			[Bindable]
			private var mainPM:MainPM = new MainPM(nativeApplication);
			
			
			private function onCreationComplete():void
			{								
				
				nativeApplication.addEventListener(Event.EXITING, onExiting);
				
				nativeApplication.menu = nativeWindow.menu = mainPM.createNativeMenu();
				
				mainPM.initialize( this);
				
				center();		
			}	
			
			// workaround to fix the quit bug on OSX with the update framework			
			private function onExiting(pEvt:Event):void
			{
				var opened:Array = nativeApplication.openedWindows;
				for (var i:int = 0; i < opened.length; i ++) {
					opened[i].close();
				}
				
			}	
			
			private function center():void
			{
				nativeWindow.x = (Capabilities.screenResolutionX - nativeWindow.width) / 2; 
				nativeWindow.y = (Capabilities.screenResolutionY - nativeWindow.height) / 2;				
			}	
			
			// Dialogs
			
			public function promptCreateNewTable():void
			{				
				var newTableForm:CreateTableDialog =  PopUpManager.createPopUp(this, CreateTableDialog, true) as CreateTableDialog;				
				newTableForm.mainPM = mainPM;				
				PopUpManager.centerPopUp(newTableForm);			
			}
			
			
			public function promptOpenFileDialog(pClosable:Boolean=false):void
			{				
				var win:OpenFileDialog = PopUpManager.createPopUp(this, OpenFileDialog, true) as OpenFileDialog;
				win.pm = mainPM;				
				PopUpManager.centerPopUp(win);
				win.closable = pClosable;
			}	
			
			
			public function promptCreateDBDialog():void
			{
				var win:CreateDBDialog = PopUpManager.createPopUp(this, CreateDBDialog, true) as CreateDBDialog;
				win.pm = mainPM;
				PopUpManager.centerPopUp(win);
			}
			
			public function promptCopyTableDialog():void
			{
				structureTab.promptCopyTableDialog();
			}			
			
			public function promptReencryptDialog():void
			{
				var win:ReencryptionDialog = PopUpManager.createPopUp(this, ReencryptionDialog, true) as ReencryptionDialog;
				win.pm = mainPM;
				PopUpManager.centerPopUp(win);				
			}
			
			public function promptUpgradeEncryptionDialog():void
			{
				var win:UpgradeEncryptionDialog = PopUpManager.createPopUp(this, UpgradeEncryptionDialog, true) as UpgradeEncryptionDialog;
				win.pm = mainPM;
				PopUpManager.centerPopUp(win);				
			}
			
			public function promptAboutDialog():void
			{
				var win:AboutWin = PopUpManager.createPopUp(this, AboutWin, true) as AboutWin;
				PopUpManager.centerPopUp(win);
				var ns:Namespace = new Namespace(nativeApplication.applicationDescriptor.namespaceDeclarations()[0]);
				win.version = nativeApplication.applicationDescriptor.ns::version;
				win.pm = mainPM;
			}			
			
			public function promptCommercialDialog():void
			{
				var dialog:WelcomeDialog = PopUpManager.createPopUp(this, WelcomeDialog, true) as WelcomeDialog;
				dialog.pm = mainPM;
				PopUpManager.centerPopUp(dialog);
			}
			
		]]>
	</fx:Script>
	
	
	<mx:ApplicationControlBar x="0" y="0" dock="true" width="100%">
		
		<mx:Image source="{ AssetManager.LOGO_ICON}"/>
		
		<mx:Label text="{ mainPM.docTitle}" 
				  toolTip="{ mainPM.fileInfos}" 
				  fontSize="12"/>
		
		<mx:Spacer width="100%"/>
		
		<mx:Button label="Open DB File"
				   icon="{AssetManager.ICON_OPEN_DB}"
				   click=" mainPM.promptOpenFile()"/>
		
		<mx:Button label="Create DB File"
				   icon="{ AssetManager.ICON_CREATE_DB}"
				   click=" mainPM.promptCreateDBFile()"/>
		
		<mx:Button label="Re-encrypt"
				   enabled="{mainPM.isValidDBOpen}"
				   icon="{ AssetManager.ICON_KEY_DB}"
				   click=" mainPM.promptReencrypt();"/>
		
		<mx:Button label="Export DB"
				   enabled="{mainPM.isValidDBOpen}"
				   icon="{AssetManager.ICON_EXPORT_DB}"
				   click=" mainPM.exportDB()"/>
		
		<mx:Button label="Compact DB"
				   enabled="{mainPM.isValidDBOpen}"
				   icon="{AssetManager.ICON_COMPACT_DB}"
				   click=" mainPM.compact()"/>
		
		<mx:Button label="About"
				   icon="{ AssetManager.ICON_HELP}"
				   click=" mainPM.promptAboutDialog()"/>
		
	</mx:ApplicationControlBar>
	
	<mx:Label y="50" right="10"
			  text="{'Last statement executed in '+mainPM.lastExecTime+' ms'}" />
	
	<view:TableListView
		enabled="{ mainPM.isValidDBOpen}"
		pm="{ mainPM.tableListPM}" 
		left="10" top="51" bottom="10" width="189"/>		
	
	<mx:TabNavigator left="207" bottom="10" top="51" right="10" creationPolicy="all"
					 selectedIndex="{mainPM.selectedTab}"
					 enabled="{ mainPM.isValidDBOpen}" 
					 selectedTabTextStyleName="SelectedTabText">
		
		<view:SQLStructureView id="structureTab" label="Structure" width="100%" height="100%" 
							   pm="{ mainPM.sqlStructureViewPM }"/>
		
		
		<s:NavigatorContent label="Data">
			<view:SQLDataView id="dataView"  width="100%" height="100%" 
				pm="{ mainPM.sqldataViewPM}"/>			
		</s:NavigatorContent>
		
		<view:IndicesView label="Indices" width="100%" height="100%" 
						  pm="{ mainPM.indicesPM}"/>
		
		<view:SQLStatementView label="SQL" width="100%" height="100%"
							   pm="{ mainPM.sqlStatementPM}" />
		
	</mx:TabNavigator>		
	
	
</s:WindowedApplication>
