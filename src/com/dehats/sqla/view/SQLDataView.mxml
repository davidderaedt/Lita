<?xml version="1.0" encoding="utf-8"?>
<!--
    Lita: A free and open source SQLite database administration tool for Windows, MacOSX and Linux.
    Copyright (C) 2010  David Deraedt

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600"
		 enabled="{ pm.selectedTable!=null}" 
		 creationComplete=" onCreationComplete()">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.dehats.air.sqlite.SQLType;
			import com.dehats.flex.controls.DateTimeEditor;
			import com.dehats.sqla.model.AssetManager;
			import com.dehats.sqla.model.presentation.SQLDataViewPM;
			
			import mx.binding.utils.BindingUtils;
			import mx.containers.FormHeading;
			import mx.containers.FormItem;
			import mx.controls.CheckBox;
			import mx.controls.Label;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.UIComponent;
			
			import spark.components.TextArea;
			import spark.components.TextInput;
			
			[Bindable]
			public var pm:SQLDataViewPM;
			
			// Stores form components for each column (selected item)
			private var colToComponent:Object;			
			
			// Stores form components for each column (new item)
			private var colToComponent2:Object;			
			
			private var defaultComp:UIComponent;
			
			
			
			private function onCreationComplete():void
			{
				pm.addEventListener(SQLDataViewPM.EVENT_TABLE_SELECTED, onTableSelected);		
				
				BindingUtils.bindSetter(fillSelectionForm, this, ["pm", "selectedRecord"]);	
			}	
			
			
			private function onTableSelected(pEvt:Event):void
			{
				prepareViewsForTable();	
			}
			
			private function prepareViewsForTable():void
			{
				
				// clear forms
				clearForms();
				
				// reset colToComponent
				colToComponent = {};
				colToComponent2 = {};
				
				// clear DG columns
				var coltab:Array = [] ;
				
				var totalCols:int = pm.selectedTable.columns.length;
				
				
				for ( var i:int = totalCols-1 ; i >= 0 ; i--) 
				{
					var col:SQLColumnSchema = pm.selectedTable.columns[i] as SQLColumnSchema;
					
					// add form items
					var formItem:FormItem = new FormItem();
					var formItem2:FormItem = new FormItem();
					
					formItem.label = col.name;					
					formItem2.label = col.name;
					
					formItem.percentWidth=100;
					formItem2.percentWidth=100;
					
					var comp:UIComponent = getCompByType( col.dataType);
					var comp2:UIComponent = getCompByType( col.dataType);
					
					if(col.autoIncrement==false) defaultComp = comp2;
					
					formItem.addElement( comp);
					formItem2.addElement( comp2);
					
					if(col.autoIncrement) 
					{
						var cb:PKCheckBoxLock = new PKCheckBoxLock();
						cb.targetComp = comp2;
						comp2.enabled=false;
						formItem2.direction="horizontal";
						formItem2.addElement(cb);
					}
					
					dynForm.addElementAt( formItem, 1);
					dynForm2.addElementAt( formItem2, 1);
					
					colToComponent[col.name] = comp;
					colToComponent2[col.name] = comp2;
					
					// add datadgrid columns
					var dgc:DataGridColumn = new DataGridColumn(col.name);
					dgc.width = ( (this.measuredWidth-20) / (totalCols-1) );
					coltab.push(dgc);
					
				}
				
				// reset dg columns
				dataDG.columns = coltab.reverse() ;
				
			}			
			
			private function clearForms():void
			{
				defaultComp = null;
				
				for ( var z:String in colToComponent) dynForm.removeElement(colToComponent[z].parent);				
				for ( var z2:String in colToComponent2) dynForm2.removeElement(colToComponent2[z2].parent);
			}
			
			
			private function selectRecord(pData:Object):void
			{
				pm.selectRecord(pData);
			}
			
			private function fillSelectionForm(pData:Object):void
			{
				
				if(pm.selectedTable==null) return;
								
				for ( var i:int = 0 ; i < pm.selectedTable.columns.length ; i++)
				{
					var col:SQLColumnSchema = pm.selectedTable.columns[i] as SQLColumnSchema;
					
					var affinity:String = SQLType.getAffinity(col.dataType) ;
					
					switch (affinity)
					{
						case SQLType.BOOLEAN:
							var cb:CheckBox = colToComponent[col.name] as CheckBox;
							if( pData==null) cb.selected = false ;
							else cb.selected = pData[col.name];
							break;
						
						case SQLType.DATE:
							var df:DateTimeEditor = colToComponent[col.name] as DateTimeEditor;
							if( pData==null)  df.selectedDate = null ;
							else df.selectedDate = pData[col.name];						
							break;
						
						case SQLType.TEXT:
							var ta:TextArea = colToComponent[col.name] as TextArea;
							if( pData==null)  ta.text = "";
							else ta.text = pData[col.name];
							break;						
						
						case SQLType.XML:
						case SQLType.XMLLIST:
							var ta2:TextArea = colToComponent[col.name] as TextArea;
							if( pData==null)  ta2.text = "";
							else ta2.text = (pData[col.name] as XML).toXMLString();
							break;						
						
						
						case SQLType.OBJECT:						
							var lab:Label = colToComponent[col.name] as Label;
							if( pData==null)  lab.text = "";
							else lab.text = pData[col.name];
							break;						
						
						default:
							var ti:TextInput = colToComponent[col.name] as TextInput;
							if( pData==null)  ti.text = "";
							else ti.text = pData[col.name];						
							break;
						
					}					
				}			
			}	
			
			private function makeItemFrom(pCol2Comp:Object):Object
			{
				var vo:Object = {};
				
				for ( var i:int = 0 ; i < pm.selectedTable.columns.length ; i++)
				{
					var col:SQLColumnSchema = pm.selectedTable.columns[i] as SQLColumnSchema;
					
					//					if( ! col.primaryKey)
					//					{
					
					var affinity:String = SQLType.getAffinity(col.dataType) ;
					
					switch ( affinity)
					{
						case SQLType.BOOLEAN:
							var cb:CheckBox = pCol2Comp[col.name] as CheckBox;
							vo[ col.name ] = cb.selected ;
							break;
						
						case SQLType.DATE:
							var df:DateTimeEditor = pCol2Comp[col.name] as DateTimeEditor;
							vo[ col.name ] = df.selectedDate;//DateField.dateToString( df.selectedDate, "YYYY-MM-DD" ) ;
							break;
						
						case SQLType.TEXT:
							var ta:TextArea = pCol2Comp[col.name] as TextArea;
							vo[ col.name ] = ta.text; 
							break;						
						
						case SQLType.XML:
						case SQLType.XMLLIST:
							var ta2:TextArea = pCol2Comp[col.name] as TextArea;
							vo[ col.name ] = new XML(ta2.text); 
							break;						
						
						
						case SQLType.REAL:
						case SQLType.NUMERIC:
							var numTi:TextInput = pCol2Comp[col.name] as TextInput;
							vo[ col.name ] = Number(numTi.text); 
							break;						
						
						case SQLType.INTEGER:
							var intTi:TextInput = pCol2Comp[col.name] as TextInput;
							vo[ col.name ] = int(intTi.text); 
							break;						
						
						case SQLType.OBJECT:
							// you can't edit objects
							break;						
						
						case SQLType.NONE:
							var ti:TextInput = pCol2Comp[col.name] as TextInput;
							vo[ col.name ] = ti.text;						
							break;
						
					}			
					//					}
					
				}	
				
				return vo;			
			}
			
			private function getCompByType(pType:String):UIComponent
			{
				
				var affinity:String = SQLType.getAffinity( pType);
				
				switch ( affinity)
				{
					case SQLType.BOOLEAN:
						return new CheckBox();
						break;
					
					case SQLType.DATE:
						return new DateTimeEditor();
						break;
					
					case SQLType.INTEGER:
						var ti:TextInput = new TextInput();
						ti.restrict="-0123456789";
						return ti;
						break;
					
					case SQLType.REAL:
					case SQLType.NUMERIC:					
						var ti2:TextInput = new TextInput();
						ti2.restrict = "-0.123456789";
						return ti2; 
						break;
					
					
					case SQLType.TEXT:
					case SQLType.XML:
					case SQLType.XMLLIST:
						var ta:TextArea =new TextArea();
						ta.percentWidth=100;
						ta.height=50;
						return ta;
						break;
					
					case SQLType.OBJECT:
						return new Label();
						break;
					
					case SQLType.NONE:
						return new TextInput();
						break;
					
				}
				
				return null;
			}	
			
			private function createRecord(pClear:Boolean):void
			{
				pm.createRecord( makeItemFrom( colToComponent2 ));
				
				if(pClear) {
					prepareViewsForTable();
					defaultComp.setFocus();
				}
				
				// we shouldn"t need to do that but for some reason the first call
				// to this method (caused by data binding) doesnt work in case of a creation
				fillSelectionForm( pm.selectedRecord);
			}
			
			
		]]>
	</fx:Script>
	<mx:Label x="10" y="12" text="{ pm.tableRecords.length } record(s)"/>
	
	<mx:Button y="10" label="Export Data"
			   click=" pm.exportRecords()" right="218" icon="{AssetManager.ICON_EXPORT_TABLE}"/>
	
	<mx:Button right="10" top="10"
			   label="Refresh" 
			   icon="{AssetManager.ICON_TABLE_REFRESH }"
			   click=" pm.refresh()" />
	
	<mx:Button y="10" right="103"
			   label="Empty Table" 
			   icon="{AssetManager.ICON_EMPTY }"
			   click=" pm.askEmptyCurrentTable()"/>
	
	
	<mx:VDividedBox left="10" top="40" bottom="10" right="10">
		
		<mx:DataGrid id="dataDG" width="100%" height="50%"
					 horizontalScrollPolicy="auto"
					 selectedItem="{ pm.selectedRecord}"
					 change=" selectRecord (dataDG.selectedItem)"
					 dataProvider="{pm.tableRecords}">
		</mx:DataGrid>
		
		<mx:HDividedBox width="100%" height="50%" horizontalAlign="center">
			
			<!-- tmp:visible used instead of enable because enable causes bugs -->
			<mx:Form  id="dynForm"  
					  visible="{pm.selectedRecord!=null}"
					  height="100%" width="50%">
				
				<mx:FormHeading label="Selected Record" />
				
				<mx:FormItem>
					<mx:Button label="Save Record" 
							   icon="{ AssetManager.ICON_SAVE}"
							   enabled="{ pm.selectedRecord != null}"
							   click=" pm.updateRecord( makeItemFrom( colToComponent) )" y="10" x="10"/>
				</mx:FormItem>
				
				<mx:FormItem>
					<mx:Button label="Delete record"
							   icon="{ AssetManager.ICON_DELETE}" 
							   enabled="{ pm.selectedRecord != null}"
							   click=" pm.deleteRecord()" y="70" x="10"/>					
				</mx:FormItem>
				
			</mx:Form>
			
			
			<mx:Form id="dynForm2" 
					 height="100%"  width="50%">
				
				<mx:FormHeading label="New Record" />
				
				<mx:FormItem direction="horizontal">			
					<mx:Button label="Add Record" 
							   keyDown="if(event.keyCode== Keyboard.ENTER) {createRecord(clearFormCB.selected);event.preventDefault()}"
							   icon="{ AssetManager.ICON_ADD}"
							   click=" createRecord(clearFormCB.selected);" x="10" y="40"/>					
					<mx:CheckBox id="clearFormCB" 
								 selected="true"
								 label="Add another record"/>
				</mx:FormItem>
				
			</mx:Form>
			
		</mx:HDividedBox>		
		
	</mx:VDividedBox>
	
</s:Group>
